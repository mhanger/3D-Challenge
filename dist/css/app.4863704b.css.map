{"version":3,"sources":["webpack:///src/design/_layout.scss","webpack:///src/router/layouts/main.vue","webpack:///src/design/_sizes.scss","webpack:///src/router/views/_404.vue","webpack:///src/design/_fonts.scss","webpack:///src/design/_typography.scss","webpack:///src/design/_colors.scss","webpack:///src/router/views/_loading.vue","webpack:///src/router/views/_timeout.vue","webpack:///src/app.vue"],"names":[],"mappings":"AAAA,mBACE,iBAAA,CCWF,sBACE,eCRuB,CDSvB,eCVuB,CDWvB,aAAA,CEgBF,kBACE,iBAAA,CCtBF,4BACE,iIAX2B,CAY3B,eAPoB,CAQpB,aAAA,CC+EA,kBA0RE,CA1RF,oBCzFmB,CD4FjB,oCAoSJ,4BAnSM,iCAAA,CAAA,CAmCJ,oCAgQF,4BA/PI,kBAoPA,CAAA,CAzRA,oCAoSJ,4BAnSM,iBAAA,CAAA,CAmCJ,oCAgQF,4BA/PI,mBA2PA,CAAA,CL/XJ,uBACE,iBAAA,COsBF,4BAGE,aAAA,CACA,aAAA,CAGA,2CACE,6BAAA,CAAA,qBAAA,CAGF,oCACE,SAAA,CCOJ,sBACE,iBAAA,CJjCF,SAEE,eAPoB,CAQpB,aEVmB,CFarB,uBALE,iIETW,CFcb,cAEE,eAVoB,CAWpB,UEjBW,CDiYb,GAvSE,kBA0RE,CA1RF,oBAiSE,CA9RA,oCAoSJ,GAnSM,iCAAA,CAAA,CAmCJ,oCAgQF,GA/PI,kBAoPA,CAAA,CAzRA,oCAoSJ,GAnSM,iBAAA,CAAA,CAmCJ,oCAgQF,GA/PI,mBA2PA,CAAA,CAUJ,GA7SE,kBA0RE,CA1RF,oBAiSE,CA9RA,oCA0SJ,GAzSM,iCAAA,CAAA,CAmCJ,oCAsQF,GArQI,kBAoPA,CAAA,CAzRA,oCA0SJ,GAzSM,iCAAA,CAAA,CAmCJ,oCAsQF,GArQI,kBA2PA,CAAA,CAgBJ,GAnTE,kBA0RE,CA1RF,oBAiSE,CA9RA,oCAgTJ,GA/SM,iCAAA,CAAA,CAmCJ,oCA4QF,GA3QI,kBAoPA,CAAA,CAzRA,oCAgTJ,GA/SM,iCAAA,CAAA,CAmCJ,oCA4QF,GA3QI,kBA2PA,CAAA,CAsBJ,GAzTE,cA0RE,CA1RF,mBAiSE,CA9RA,oCAsTJ,GArTM,mCAAA,CAAA,CAmCJ,oCAkRF,GAjRI,mBAoPA,CAAA,CAzRA,oCAsTJ,GArTM,eAAA,CAAA,CAmCJ,oCAkRF,GAjRI,kBA2PA,CAAA,CA4BJ,WA/TE,iBA0RE,CA1RF,mBAiSE,CA9RA,oCA4TJ,WA3TM,gCAAA,CAAA,CAmCJ,oCAwRF,WAvRI,cAoPA,CAAA,CAzRA,oCA4TJ,WA3TM,mBAAA,CAAA,CAmCJ,oCAwRF,WAvRI,mBA2PA,CAAA,CL/XJ,QACE,iBAAA,CSsCF,iBAGE,6BAAA,CAAA,qBAAA,CAGF,KACE,eH7Cc,CGuDhB,YAEE,aHpDgB,CGgFlB,gBACE,kBHjFgB","file":"app.4863704b.css","sourcesContent":[".center {\n  text-align: center;\n}\n","\n\n\n\n\n\n\n\n\n\n@import '@design';\n\n.container {\n  min-width: $size-content-width-min;\n  max-width: $size-content-width-max;\n  margin: 0 auto;\n}\n","// GRID\n$size-grid-padding: 1.3rem;\n\n// CONTENT\n$size-content-width-max: 50rem;\n$size-content-width-min: 25rem;\n\n// INPUTS\n$size-input-padding-vertical: 0.75em;\n$size-input-padding-horizontal: 1em;\n$size-input-padding: $size-input-padding-vertical $size-input-padding-horizontal;\n$size-input-border: 1px;\n$size-input-border-radius: (1em + $size-input-padding-vertical * 2) / 10;\n\n// BUTTONS\n$size-button-padding-vertical: $size-grid-padding / 2;\n$size-button-padding-horizontal: $size-grid-padding / 1.5;\n$size-button-padding: $size-button-padding-vertical\n  $size-button-padding-horizontal;\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.title {\n  text-align: center;\n}\n","$system-default-font-family: -apple-system, 'BlinkMacSystemFont', 'Segoe UI',\n  'Helvetica', 'Arial', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji',\n  'Segoe UI Symbol';\n\n$heading-font-family: $system-default-font-family;\n$heading-font-weight: 600;\n\n$content-font-family: $system-default-font-family;\n$content-font-weight: 400;\n\n%font-heading {\n  font-family: $heading-font-family;\n  font-weight: $heading-font-weight;\n  color: $color-heading-text;\n}\n\n%font-content {\n  font-family: $content-font-family;\n  font-weight: $content-font-weight;\n  color: $color-text;\n}\n","// Interpolate v1.0\n\n// This mixin generates CSS for interpolation of length properties.\n// It has 5 required values, including the target property, initial\n// screen size, initial value, final screen size and final value.\n\n// It has two optional values which include an easing property,\n// which is a string, representing a CSS animation-timing-function\n// and finally a number of bending-points, that determines how many\n// interpolations steps are applied along the easing function.\n\n// Author: Mike Riethmuller - @MikeRiethmuller\n// More information: http://codepen.io/MadeByMike/pen/a2249946658b139b7625b2a58cf03a65?editors=0100\n\n///\n/// @param {String} $property - The CSS property to interpolate\n/// @param {Unit} $min-screen - A CSS length unit\n/// @param {Unit} $min-value - A CSS length unit\n/// @param {Unit} $max-screen - Value to be parsed\n/// @param {Unit} $max-value - Value to be parsed\n/// @param {String} $easing - Value to be parsed\n/// @param {Integer} $bending-points - Value to be parsed\n///\n\n// Examples on line 258\n\n// Issues:\n\n// - kubic-bezier requires whitespace\n// - kubic-bezier cannot parse negative values\n\n// stylelint-disable scss/dollar-variable-pattern\n@mixin typography-interpolate(\n  $property,\n  $min-screen,\n  $min-value,\n  $max-screen,\n  $max-value,\n  $easing: 'linear',\n  $bending-points: 2\n) {\n  // Default Easing 'Linear'\n  $p0: 0;\n  $p1: 0;\n  $p2: 1;\n  $p3: 1;\n\n  // Parse Cubic Bezier string\n  @if (str-slice($easing, 1, 12) == 'kubic-bezier') {\n    // Get the values between the brackets\n    // TODO: Deal with different whitespace\n    $i: str-index($easing, ')'); // Get index of closing bracket\n    $values: str-slice($easing, 14, $i - 1); // Extract values between brackts\n    $list: typography-explode($values, ', '); // Split the values into a list\n\n    @debug ($list);\n\n    // Cast values to numebrs\n    $p0: typography-number(nth($list, 1));\n    $p1: typography-number(nth($list, 2));\n    $p2: typography-number(nth($list, 3));\n    $p3: typography-number(nth($list, 4));\n  }\n\n  @if ($easing == 'ease') {\n    $p0: 0.25;\n    $p1: 1;\n    $p2: 0.25;\n    $p3: 1;\n  }\n\n  @if ($easing == 'ease-in-out') {\n    $p0: 0.42;\n    $p1: 0;\n    $p2: 0.58;\n    $p3: 1;\n  }\n\n  @if ($easing == 'ease-in') {\n    $p0: 0.42;\n    $p1: 0;\n    $p2: 1;\n    $p3: 1;\n  }\n\n  @if ($easing == 'ease-out') {\n    $p0: 0;\n    $p1: 0;\n    $p2: 0.58;\n    $p3: 1;\n  }\n\n  #{$property}: $min-value;\n\n  @if ($easing == 'linear' or $bending-points < 1) {\n    @media screen and (min-width: $min-screen) {\n      #{$property}: typography-calc-interpolation(\n        $min-screen,\n        $min-value,\n        $max-screen,\n        $max-value\n      );\n    }\n  } @else {\n    // Loop through bending points\n    $t: 1 / ($bending-points + 1);\n    $i: 1;\n    $prev-screen: $min-screen;\n    $prev-value: $min-value;\n\n    @while $t * $i <= 1 {\n      $bending-point: $t * $i;\n      $value: typography-cubic-bezier($p0, $p1, $p2, $p3, $bending-point);\n      $screen-int: typography-lerp($min-screen, $max-screen, $bending-point);\n      $value-int: typography-lerp($min-value, $max-value, $value);\n\n      @media screen and (min-width: $prev-screen) {\n        #{$property}: typography-calc-interpolation(\n          $prev-screen,\n          $prev-value,\n          $screen-int,\n          $value-int\n        );\n      }\n\n      $prev-screen: $screen-int;\n      $prev-value: $value-int;\n      $i: $i + 1;\n    }\n  }\n\n  @media screen and (min-width: $max-screen) {\n    #{$property}: $max-value;\n  }\n}\n\n// Requires several helper functions including: pow, calc-interpolation, kubic-bezier, number and explode\n\n// Math functions:\n\n// Linear interpolations in CSS as a Sass function\n// Author: Mike Riethmuller | https://madebymike.com.au/writing/precise-control-responsive-typography/ I\n\n@function typography-calc-interpolation(\n  $min-screen,\n  $min-value,\n  $max-screen,\n  $max-value\n) {\n  $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n  $b: $min-value - $a * $min-screen;\n\n  $sign: '+';\n\n  @if ($b < 0) {\n    $sign: '-';\n    $b: abs($b);\n  }\n\n  @return calc(#{$a * 100}vw #{$sign} #{$b});\n}\n\n// This is a crude Sass port webkits cubic-bezier function. Looking to simplify this if you can help.\n@function typography-solve-bexier-x($p1x, $p1y, $p2x, $p2y, $x) {\n  $cx: 3 * $p1x;\n  $bx: 3 * ($p2x - $p1x) - $cx;\n  $ax: 1 - $cx - $bx;\n\n  $t0: 0;\n  $t1: 1;\n  $t2: $x;\n  $x2: 0;\n  $res: 1000;\n\n  @while ($t0 < $t1 or $break) {\n    $x2: (($ax * $t2 + $bx) * $t2 + $cx) * $t2;\n\n    @if (abs($x2 - $x) < $res) {\n      @return $t2;\n    }\n\n    @if ($x > $x2) {\n      $t0: $t2;\n    } @else {\n      $t1: $t2;\n    }\n    $t2: ($t1 - $t0) * 0.5 + $t0;\n  }\n\n  @return $t2;\n}\n\n@function typography-cubic-bezier($p1x, $p1y, $p2x, $p2y, $x) {\n  $cy: 3 * $p1y;\n  $by: 3 * ($p2y - $p1y) - $cy;\n  $ay: 1 - $cy - $by;\n  $t: typography-solve-bexier-x($p1x, $p1y, $p2x, $p2y, $x);\n\n  @return (($ay * $t + $by) * $t + $cy) * $t;\n}\n\n// A stright up lerp\n// Credit: Ancient Greeks possibly Hipparchus of Rhodes\n@function typography-lerp($a, $b, $t) {\n  @return $a + ($b - $a) * $t;\n}\n\n// String functions:\n\n// Cast string to number\n// Credit: Hugo Giraudel | https://www.sassmeister.com/gist/9fa19d254864f33d4a80\n@function typography-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: log('Value for `to-number` should be a number or a string.');\n  }\n\n  $result: 0;\n  $digits: 0;\n  $minus: str-slice($value, 1, 1) == '-';\n  $numbers: (\n    '0': 0,\n    '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9,\n  );\n\n  @for $i from if($minus, 2, 1) through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not(index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i));\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n// Explode a string by a delimiter\n// Credit: https://gist.github.com/danielpchen/3677421ea15dcf2579ff\n@function typography-explode($string, $delimiter) {\n  $result: ();\n\n  @if $delimiter == '' {\n    @for $i from 1 through str-length($string) {\n      $result: append($result, str-slice($string, $i, $i));\n    }\n\n    @return $result;\n  }\n  $exploding: true;\n\n  @while $exploding {\n    $d-index: str-index($string, $delimiter);\n\n    @if $d-index {\n      @if $d-index > 1 {\n        $result: append($result, str-slice($string, 1, $d-index - 1));\n        $string: str-slice($string, $d-index + str-length($delimiter));\n      } @else if $d-index == 1 {\n        $string: str-slice($string, 1, $d-index + str-length($delimiter));\n      } @else {\n        $result: append($result, $string);\n        $exploding: false;\n      }\n    } @else {\n      $result: append($result, $string);\n      $exploding: false;\n    }\n  }\n\n  @return $result;\n}\n\n// Using vertical rhythm methods from https://scotch.io/tutorials/aesthetic-sass-3-typography-and-vertical-rhythm\n// Using perfect 8/9 for low contrast and perfect fifth 2/3 for high\n$typography-type-scale: (\n  -1: 0.889rem,\n  0: 1rem,\n  1: 1.125rem,\n  2: 1.266rem,\n  3: 1.424rem\n);\n\n@function typography-type-scale($level) {\n  @if map-has-key($typography-type-scale, $level) {\n    @return map-get($typography-type-scale, $level);\n  }\n\n  @warn 'Unknown `#{$level}` in $typography-type-scale.';\n\n  @return null;\n}\n\n$typography-type-scale-contrast: (\n  -1: 1rem,\n  0: 1.3333rem,\n  1: 1.777rem,\n  2: 2.369rem,\n  3: 3.157rem\n);\n\n@function typography-type-scale-contrast($level) {\n  @if map-has-key($typography-type-scale-contrast, $level) {\n    @return map-get($typography-type-scale-contrast, $level);\n  }\n\n  @warn 'Unknown `#{$level}` in $typography-type-scale-contrast.';\n\n  @return null;\n}\n\n$typography-base-font-size: 1rem;\n$typography-base-line-height: $typography-base-font-size * 1.25;\n\n$typography-line-heights: (\n  -1: $typography-base-line-height,\n  0: $typography-base-line-height,\n  1: $typography-base-line-height * 1.5,\n  2: $typography-base-line-height * 1.5,\n  3: $typography-base-line-height * 1.5\n);\n\n@function typography-line-height($level) {\n  @if map-has-key($typography-line-heights, $level) {\n    @return map-get($typography-line-heights, $level);\n  }\n\n  @warn 'Unknown `#{$level}` in $line-height.';\n\n  @return null;\n}\n\n$typography-base-line-height-contrast: $typography-base-line-height;\n\n$typography-line-heights-contrast: (\n  -1: $typography-base-line-height-contrast,\n  0: $typography-base-line-height-contrast * 2,\n  1: $typography-base-line-height-contrast * 2,\n  2: $typography-base-line-height-contrast * 2,\n  3: $typography-base-line-height * 3\n);\n\n@function typography-line-height-contrast($level) {\n  @if map-has-key($typography-line-heights-contrast, $level) {\n    @return map-get($typography-line-heights-contrast, $level);\n  }\n\n  @warn 'Unknown `#{$level}` in $typography-line-heights-contrast.';\n\n  @return null;\n}\n\n// Mixing these two sets of mixins ala Rachel:\n@mixin typography-got-rhythm($level: 0) {\n  @include typography-interpolate(\n    'font-size',\n    $size-content-width-min,\n    typography-type-scale($level),\n    $size-content-width-max,\n    typography-type-scale-contrast($level)\n  );\n  @include typography-interpolate(\n    'line-height',\n    $size-content-width-min,\n    typography-line-height($level),\n    $size-content-width-max,\n    typography-line-height-contrast($level)\n  );\n}\n\n%typography-xxlarge {\n  @include typography-got-rhythm(3);\n\n  @extend %font-heading;\n}\n\n%typography-xlarge {\n  @include typography-got-rhythm(2);\n\n  @extend %font-heading;\n}\n\n%typography-large {\n  @include typography-got-rhythm(1);\n\n  @extend %font-heading;\n}\n\n%typography-medium {\n  @include typography-got-rhythm(0);\n\n  @extend %font-content;\n}\n\n%typography-small {\n  @include typography-got-rhythm(-1);\n\n  @extend %font-content;\n}\n","// CONTENT\n$color-body-bg: #000;\n$color-text: #444;\n$color-heading-text: #35495e;\n\n// LINKS\n$color-link-text: #39a275;\n$color-link-text-active: $color-text;\n\n// INPUTS\n$color-input-border: lighten($color-heading-text, 50%);\n\n// BUTTONS\n$color-button-bg: $color-link-text;\n$color-button-disabled-bg: darken(desaturate($color-button-bg, 20%), 10%);\n$color-button-text: white;\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import '@design';\n\n.loadingIcon {\n  @extend %typography-xxlarge;\n\n  display: block;\n  margin: 0 auto;\n\n  // stylelint-disable-next-line selector-class-pattern\n  &:global(.v-enter-active) {\n    transition: opacity 1s;\n  }\n  // stylelint-disable-next-line selector-class-pattern\n  &:global(.v-enter) {\n    opacity: 0;\n  }\n}\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.title {\n  text-align: center;\n}\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Allow element/type selectors, because this is global CSS.\n// stylelint-disable selector-max-type, selector-class-pattern\n\n// Normalize default styles across browsers,\n// https://necolas.github.io/normalize.css/\n@import '~normalize.css/normalize.css';\n// Style loading bar between pages.\n// https://github.com/rstacruz/nprogress\n@import '~nprogress/nprogress.css';\n\n// Design variables and utilities from src/design.\n@import '@design';\n\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\nbody {\n  background: $color-body-bg;\n}\n#app {\n  @extend %typography-small;\n}\n\n// ===\n// Base element styles\n// ===\n\na,\na:visited {\n  color: $color-link-text;\n}\n\nh1 {\n  @extend %typography-xxlarge;\n}\n\nh2 {\n  @extend %typography-xlarge;\n}\n\nh3 {\n  @extend %typography-large;\n}\n\nh4 {\n  @extend %typography-medium;\n}\n\nh5,\nh6 {\n  @extend %typography-small;\n}\n\n// ===\n// Vendor\n// ===\n\n#nprogress .bar {\n  background: $color-link-text;\n}\n"]}